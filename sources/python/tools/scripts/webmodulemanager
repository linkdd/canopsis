#!/opt/canopsis/bin/python
# -*- coding: utf-8 -*-

# --------------------------------
# Copyright (c) 2015 "Capensis" [http://www.capensis.com]
#
# This file is part of Canopsis.
#
# Canopsis is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Canopsis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Canopsis.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------

from canopsis.configuration.dbconfigurationmanager import DBConfiguration
import os
import sys
from json import loads, dumps
import argparse


# Default install module list in Canopsis
modules = [
    'core',
    'uibase',
    'monitoring',
    'development',
    'uiv1_themes',
    'canopsis-backend-ui-connector',
    'canopsis-ui',
    'userpreferences',
    'charts',
    'canopsis-vevent',
    'canopsis-pbehavior',
    'canopsis-rights'
]

"""
This module aims to manager registed webcore modules in canopsis
by allowing to add/remove module from enabled.json list in webcore.
"""

DEBUG = False
# Database access
db_configuration_manager = DBConfiguration()
_id = 'enabledmodules'


def log(message):
    print(message)


def debug(message):
    if DEBUG:
        print(message)


def load_list():
    configuration = db_configuration_manager.find_one(
        query={'_id': _id}
    )
    enabled_list = configuration['enabled']
    debug('load enabled_list')
    debug(enabled_list)
    return enabled_list


def save_list(enabled_list):
    debug('save enabled_list')
    debug(enabled_list)
    db_configuration_manager.put(
        _id,
        {'enabled': enabled_list}
    )


def show_module(unused):
    enabled_list = load_list()
    log(enabled_list)


def add_module(module_name):
    enabled_list = load_list()
    if module_name not in enabled_list:
        enabled_list.append(module_name)
        save_list(enabled_list)
        log('Added {} module'.format(module_name))
    else:
        log('Module {} already registered'.format(module_name))


def remove_module(module_name):
    enabled_list = load_list()
    if module_name in enabled_list:
        enabled_list.remove(module_name)
        save_list(enabled_list)
        log('Removed {} module'.format(module_name))
    else:
        log('Could not remove module {} as not registered'.format(module_name))


def init_modules(module_name):
    # module name is not used here
    for module in modules:
        add_module(module)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Canopsis webcore module manager'
    )
    parser.add_argument(
        'action',
        type=str,
        help='What operation to perform on web modules',
        choices=['add', 'remove', 'show', 'init']
    )
    parser.add_argument(
        'module_name',
        type=str,
        help='The module to manage',
        nargs='?'
    )

    args = vars(parser.parse_args())

    if args['action'] in ['add', 'remove'] and not args['module_name']:
        log('No module name given, aborting operation')
        sys.exit(1)

    action = {
        'add': add_module,
        'remove': remove_module,
        'show': show_module,
        'init': init_modules
    }[args['action']]

    action(args['module_name'])
